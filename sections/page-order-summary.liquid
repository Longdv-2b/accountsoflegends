<div>

    <div class="preloader">
        <div class="preloader-spinner"></div>
    </div>
    <ul class='list-order'>

    </ul>

    <div class='form-os'>

        {% if customer.email == blank %}
        <div>
            <div class='label-email'>* Required</div>
            <input class='input-email' type='email' autocomplete="off" placeholder='Enter your email address' />
        </div>

        {% else %}
        <b id="customer-info" customer="{{ customer.email }}" style="display: none;">{% for code in
            customer.metafields['custom_2b_io'].discounts_available limit: 1 %}{{ code }}{% endfor %}</b>
        {% endif %}

        <div>
            <div class='wrapper-discount-code'>
                <input class='input-discount-code' autocomplete="off" type='text' placeholder='Discount code' />
                <button class='btn btn-apply-discount'>
                    <div class="load"></div>
                    <span>Apply</span>
                </button>
            </div>
            <div class='info-prices'>

                <div class='box-price-discount'>
                    <span>Discount:</span>
                    <span class='price-discount'></span>
                </div>

                <div class='box-sub-total'>
                    <span>SubTotal:</span>
                    <span class='sub-total'></span>
                </div>

                <div class='box-total-price'>
                    <span>Total Price:</span>
                    <span class='total-price'></span>
                </div>
            </div>
        </div>
        <button class='sm-data-os'>Buy Boost Now</button>
    </div>
</div>
<script>
    function saveNavToOrder(tagNavPage) {
        localStorage.setItem('NAV_TO_ORDER', 'cart');
    }
    function getCookie(name) {
        var dc = document.cookie;
        var prefix = name + "=";
        var begin = dc.indexOf("; " + prefix);
        if (begin == -1) {
            begin = dc.indexOf(prefix);
            if (begin != 0) return null;
        }
        else
        {
            begin += 2;
            var end = document.cookie.indexOf(";", begin);
            if (end == -1) {
            end = dc.length;
            }
        }
        // because unescape has been deprecated, replaced with decodeURI
        //return unescape(dc.substring(begin + prefix.length, end));
        return decodeURI(dc.substring(begin + prefix.length, end));
    } 
    document.addEventListener('DOMContentLoaded', function () {

        const API_ROOT = 'https://gateway.accountsoflegends.com/storefront';
        const API_CART = '/cart.js';
        const API_VALIDATE_DISCOUNT_CODE = '/validate-discount-code';

        const url_string = location.href;
        const url = new URL(url_string);
        function getParamUrl(keyParam) {
            return url.searchParams.get(keyParam);
        }

        const listOrder = document.querySelector('.list-order');
        const customerInfo = document.querySelector('#customer-info');
        const inputEmail = document.querySelector('.input-email');
        const inputDiscountCode = document.querySelector('.input-discount-code');

        const symbolCurrency = '$'

        let totalPrice, discountCodeAdded = '', productList = [];

        async function handleApi(url = '', data = {}, METHOD = 'GET') {
            const response = await fetch(url, {
                method: METHOD,
                cache: 'no-cache',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'pass_dev': 'pass_dev'
                },
                body: METHOD !== 'GET' ? JSON.stringify(data) : null
            });
            return response.json();
        }

        function emailAddress(initLoadPage) {
            let email = '';

            if (customerInfo) {
                email = "{{ customer.email }}";
            } else {
                if (inputEmail.value.trim() === '') {
                    !initLoadPage && alert('Email address is required');
                    return;
                }
                if (inputEmail.validationMessage !== '') {
                    !initLoadPage && alert(inputEmail.validationMessage);
                    return;
                }
                email = inputEmail.value.trim();
            }
            return email;
        }

        function handleDiscountCode(initLoadPage, totalPriceInitPage) {
            let discountCode = '';

            if (initLoadPage && customerInfo && customerInfo.textContent) {
                discountCode = customerInfo.textContent;
                discountCodeAdded = discountCode;
            }

            if(initLoadPage){
                if(customerInfo){
                    if(customerInfo.textContent){
                        discountCode = customerInfo.textContent;
                        discountCodeAdded = discountCode;
                    }else {
                        priceThenDiscount(totalPriceInitPage)
                    }
                }

                if(getCookie('discount_code')){
                    discountCode = getCookie('discount_code');
                    discountCodeAdded = getCookie('discount_code');
                }

            }else {

                discountCode = inputDiscountCode.value.trim();
                if (discountCode === '') {
                    alert('You have not entered the discount code');
                    return;
                }
                if (!emailAddress()) {
                    return;
                }
            }
            console.log('discountCodeAdded =>', discountCodeAdded);
            handleLoadingButton('add');
            handleApi(
                `${API_ROOT}${API_VALIDATE_DISCOUNT_CODE}`,
                {
                    "email": initLoadPage && !customerInfo ? (getCookie('discount_code') ? '' : emailAddress(initLoadPage)) : emailAddress(initLoadPage),
                    "discount_code": discountCode,
                    "product": productList,
                },
                'POST'
            )
                .then(res => {
                    if (res.message === 'success') {
                        priceThenDiscount(res.total_price)
                        !initLoadPage && alert('Successfully applied discount code')
                        discountCodeAdded = discountCode;
                    } else {
                        if (initLoadPage) {
                            priceThenDiscount(totalPriceInitPage)
                        } else {
                            alert(res.message)
                        }
                        console.log('vanlong 12');
                        discountCodeAdded = '';
                    }
                    handleLoadingButton('remove');
                })
                .catch(() => handleCatch('Please reload the page, and try again', false))

        }

        function handleLoadingButton(action) {
            document.querySelector('.btn-apply-discount').classList[action]('is-loading')
        }

        function handleCatch(message = 'You should redirect from product or cart page', navPage= true) {
            alert(message);
            if(navPage){
                location.href = '/'
            }
        }

        function renderOrders(items) {
            items.forEach(item => {
                listOrder.innerHTML += `<li>
                    <div class='image-product'>
                        <img src=${item.image ? item.image : 'https://dummyimage.com/200x200/ffffff/cccccc&text=no+thumb'} />
                        ${item.quantity ? `<span class='qlt-count'>${item.quantity}</span>` : ''}   
                    </div>

                    <div class='box-content'>
                        <div>
                            <div class='heading'>
                                <span class='title'>${item.product_title}</span>
                            </div>   

                            ${item.variant_title
                        ? `<div class='variant'>
                                        <span>${item.variant_title}</span>
                                    </div>`
                        : ""}
                        </div>
                        ${item.price ? `<span class='price'>${Shopify.formatMoney(item.price)}</span>` : ''}
                    </div>
                </li>`
            });
        }

        function togglePriceDiscount(action) {
            document.querySelector('.box-price-discount').style.display = action;
            document.querySelector('.box-sub-total').style.display = action;
        }

        function priceThenDiscount(totalPriceParam) {
            const priceOld = Shopify.formatMoney(totalPriceParam).replace(symbolCurrency, '')
            if (Number(totalPriceParam) !== Number(totalPrice)) {

                togglePriceDiscount('flex')

                const subTotal =  Shopify.formatMoney(totalPrice)
                const priceDiscount = Number(subTotal.replace(symbolCurrency, '') - Number(totalPriceParam) )

                document.querySelector('.price-discount').textContent = `- ${symbolCurrency}${(priceDiscount).toFixed(2)}`;
                document.querySelector('.sub-total').textContent =  subTotal;
                document.querySelector('.total-price').textContent = `${symbolCurrency}${totalPriceParam}`
            } else {
                document.querySelector('.total-price').textContent = Shopify.formatMoney(totalPriceParam)
                togglePriceDiscount('none')
            }
            document.body.classList.add('loaded');
            handleLoadingButton('remove');
        }

        (function handleSubmitApplyCode() {
            document.querySelector('.btn-apply-discount').addEventListener('click', function () {
                handleDiscountCode()
            })
        })();

        (function initPage() {


            if (location.href === `${location.origin}/pages/order-summary` || location.origin.includes('myshopify.com')) { // case redirect from cart page
                
                handleApi(API_CART)
                    .then(res => {

                        renderOrders(res.items)
                        const products = res.items.map(item => {
                            return {
                                id: item.product_id,
                                variant: [{ id: Number(item.variant_id), quantity: item.quantity }] 
                            }
                        })

                        productList = products;
                        totalPrice = res.total_price;
                        handleDiscountCode(initLoadPage = true, totalPriceInitPage = totalPrice)
                    })
                    .catch(() => handleCatch())

            } else if (getParamUrl('product_handle') && getParamUrl('variant_id')) {

                handleApi(`/products/${getParamUrl('product_handle')}.js`)
                    .then(res => {

                        const variantProduct = res.variants.find(item => item.id === Number(getParamUrl('variant_id')))

                        if (!variantProduct) {
                            handleCatch();
                            return;
                        }

                        let variantTitle = '';

                        if (variantProduct.title && variantProduct.title !== 'Default Title') {
                            variantTitle += variantProduct.title
                        }

                        const priceProduct = variantProduct.price;

                        renderOrders(
                            [{
                                price: priceProduct,
                                quantity: 1,
                                image: res.featured_image,
                                product_title: res.title,
                                variant_title: variantTitle
                            }]
                        )

                        productList = [{ 
                            id: res.id, 
                            variant: [{ id: Number(variantProduct.id), quantity: 1 }] 
                        }];
                        totalPrice = priceProduct;

                        handleDiscountCode(initLoadPage = true, totalPriceInitPage = variantProduct.price)
                    })
                    .catch((err) => { handleCatch('error init'); })
            } else {
                handleCatch();
            }

        })();

        (function handleSubmitBuyBoostNow() {

             
            document.querySelector('.sm-data-os').addEventListener('click', function () {

                let urlNav = location.href.replace(`${location.origin}/pages/order-summary`, '');
                let discount_code = discountCodeAdded ? `&discount_code=${discountCodeAdded}` : '';

                function utilsUrlNav(type) {
                    const boxPricePercent = document.querySelector('.box-price-discount');
                    const boxPriceOld = document.querySelector('.box-sub-total');
                    const boxPriceFinal = document.querySelector('.box-total-price');

                    if (!emailAddress()) {
                        return;
                    }

                    urlNav += `${type}email=${emailAddress()}${discount_code}`
                    if (boxPricePercent.style.display === 'flex') {
                        urlNav += `&price_discount=${boxPricePercent.querySelector('.price-discount').textContent}`;
                    }
                    if (boxPriceOld.style.display === 'flex') {
                        urlNav += `&sub_total=${boxPriceOld.querySelector('.sub-total').textContent}`;
                    }

                    urlNav += `&total_price=${boxPriceFinal.querySelector('.total-price').textContent}`;
                    location.href = `/pages/payments-gateway${urlNav}`;
                }

                if(location.origin.includes('myshopify.com')){
                    location.href = `/pages/payments-gateway`;
                    return;
                }
                if(getCookie('discount_code')){
                    if(discountCodeAdded){
                        handleDiscountCode()
                    }else {
                        alert('discount err')
                    }
                    return;
                }

                if (location.href === `${location.origin}/pages/order-summary`) {
                    saveNavToOrder('cart')
                    utilsUrlNav('?')
                } else if (getParamUrl('product_handle') && getParamUrl('variant_id')) {
                    saveNavToOrder('products')
                    utilsUrlNav('&')
                } else {
                    handleCatch()
                }
            })
        })();

    })
</script>
<style>
    @keyframes rotate {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }


    @-webkit-keyframes rotate {
        from {
            -webkit-transform: rotate(0deg);
        }

        to {
            -webkit-transform: rotate(360deg);
        }
    }

    .load {
        width: 20px;
        height: 20px;
        border: solid 3px white;
        border-radius: 50%;
        border-right-color: transparent;
        border-bottom-color: transparent;
        -webkit-transition: all 0.5s ease-in;
        -webkit-animation-name: rotate;
        -webkit-animation-duration: 0.6s;
        -webkit-animation-iteration-count: infinite;
        -webkit-animation-timing-function: linear;
        transition: all 0.5s ease-in;
        animation-name: rotate;
        animation-duration: 0.6s;
        animation-iteration-count: infinite;
        animation-timing-function: linear;
    }

    .wrapper-discount-code .load {
        opacity: 0;
        pointer-events: none;
        position: absolute;
        left: 27px;
        top: 18px;
    }

    .wrapper-discount-code .is-loading .load {
        opacity: 1;
        pointer-events: auto;
    }

    .btn-apply-discount {
        position: relative;
    }

    .wrapper-discount-code .is-loading .load+span {
        opacity: 0;
        pointer-events: none;
    }

    .wrapper-discount-code .is-loading {
        pointer-events: none;
    }

    .info-prices>div {
        display: flex;
        width: 100%;
        justify-content: space-between;
        font-size: 16px;
        color: #000000c4;
        margin-top: 15px;
        border-bottom: 1px solid #ccc;
        padding-bottom: 10px;
        padding-top: 10px;
    }
</style>